@using System.Globalization
@model BabunBank.Models.ViewModels.Customer.CustomerViewModel

@{
    ViewBag.Title = "Customer Details";
    Layout = "_Layout";
}

<div id="customer-details-bg">
    <div class="container customer">
        <div style="margin-bottom: 72px" class="customer-card-container">
            <div class="customer-card-left">
                <table style="margin-bottom: 72px" class="customer-data-table">
                    <thead>
                    <tr>
                        <th style="padding-bottom: 24px; font-weight: bolder; font-size: 1.5rem">
                            Customer Overview
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>Name: @Model.GivenName @Model.Surname</td>
                    </tr>
                    <tr>
                        <td>Gender: @Model.Gender</td>
                    </tr>
                    <tr>
                        <td>Address: @Model.Streetaddress</td>
                    </tr>
                    <tr>
                        <td>Zip Code: @Model.Zipcode</td>
                    </tr>
                    <tr>
                        <td>Country: @Model.Country</td>
                    </tr>
                    <tr>
                        <td style="padding: 24px 0; font-weight: bolder; font-size: 1.5rem">List of all customer accounts</td>
                    </tr>
                    <tr>
                    @foreach (var account in Model.CustomerAccounts)
                    {
                        <td class="customer-data-table-accounts" style="display: flex; justify-content: space-between; align-items: center; gap: 24px; padding-top: 2px">
                            <div>
                                Id: @account.AccountId (@account.Type) - @account.Transactions.Sum(a => a.Amount).ToString("C2", new CultureInfo("sv-SE"))
                            </div>
                            <div style="display: flex; gap: 12px">
                                <a asp-controller="Account" asp-action="Deposit" asp-route-id="@account.AccountId" class="inspect-account-button">
                                    <i class="material-symbols-outlined">
                                        add_circle
                                    </i>
                                </a>
                                <a asp-controller="Account" asp-action="Withdraw" asp-route-id="@account.AccountId" class="inspect-account-button">
                                    <i class="material-symbols-outlined">
                                        remove
                                    </i>
                                </a>
                                <a asp-controller="Account" asp-action="Transfer" asp-route-id="@account.AccountId" class="inspect-account-button">
                                    <i class="material-symbols-outlined">
                                        input
                                    </i>
                                </a>
                                <a asp-controller="Cashier" asp-action="Inspect" asp-route-id="@account.AccountId" class="inspect-account-button"><i class="material-symbols-outlined">search</i></a>
                            </div>
                        </td>
                    }
                    <tr>
                        <td style="padding-top: 24px">Sum of all accounts: @Model.CustomerAccounts.Sum(a => a.Balance).ToString("C2", new CultureInfo("sv-SE"))</td>
                    </tr>
                    </tbody>
                </table>
                <div class="customer-card-crud">
                    <a asp-action="CreateAccount" asp-controller="Cashier" asp-route-id="@Model.CustomerId" class="create-customer-form-btn">
                        Create a new account
                    </a>
                    <a asp-action="Update" asp-controller="Cashier" asp-route-id="@Model.CustomerId" class="create-customer-form-btn">
                        Edit Customer
                    </a>
                    <a asp-action="Index" asp-controller="Cashier" asp-route-sortColumn="@ViewBag.SortColumn" asp-route-sortOrder="@ViewBag.SortOrder" class="create-customer-form-btn">
                        Return
                    </a>
                    <button style="width: 50px" class="create-customer-form-btn" id="toggleTransactionsButton" onclick="toggleTransactions()">
                        <i class="material-symbols-outlined" id="doNotShow">
                            visibility
                        </i>
                        <i class="material-symbols-outlined hidden" id="show">
                            visibility_off
                        </i>
                    </button>
                </div>
            </div>
            <div class="customer-card-right">
                <a asp-controller="Cashier" asp-action="Delete" asp-route-id="@Model.CustomerId" class="btn-regret" id="customer-delete-button">
                    Delete
                </a>
                @if (@Model.Gender.ToLower() == "male")
                {
                    <img src="https://avatar.iran.liara.run/public/boy" alt="TODO">
                }
                else
                {
                    <img src="https://avatar.iran.liara.run/public/girl" alt="TODO">
                }
            </div>
        </div>
        <table style="margin-bottom: 72px" class="data-table" id="transactionTable">
            <thead>
            <tr>
                <th>Transaction Id</th>
                <th>Account Id</th>
                <th>Transaction Date</th>
                <th>Transaction Amount</th>
                <th>Transaction Balance</th>
                <th>Transaction Type</th>
            </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
        <span style="display: flex; justify-content: center; gap: 24px">
            <button id="loadMore-button" onclick="showMore()">Load More</button>
            <button id="goToTop-button" onclick="goToTop()">
                <i class="material-symbols-outlined">
                    arrow_upward
                </i>
            </button>
        </span>
    </div>
</div>


<script defer>
        function formatCurrency(amount, currency = 'SEK', locale = 'sv-SE') {
            return new Intl.NumberFormat(locale, {
                style: 'currency',
                currency: currency
            }).format(amount);
        }
        
        let pageNo = 1;

        document.addEventListener("DOMContentLoaded", function () {
            showMore();
        });
        
        async function showMore() {
            const response = await fetch(`/Cashier/ShowMore?id=@Model.CustomerId&pageNo=${pageNo}`);
            const transactions = await response.json();
            pageNo += 1;
            transactions.forEach(drawElements);
        }

        function formatDate(dateString, locale = 'sv-SE') {
            return new Date(dateString).toLocaleDateString(locale);
        }

        function drawElements(transaction) {
            let table = document.querySelector("#transactionTable tbody");
            let row = `<tr>
                            <td>${transaction.transactionId}</td>
                            <td>${transaction.accountId}</td>
                            <td>${formatDate(transaction.date)}</td>
                            <td>${formatCurrency(transaction.amount)}</td>
                            <td>${formatCurrency(transaction.balance)}</td>
                            <td>${transaction.operation ? transaction.operation : 'N/A'}</td>
                    </tr>`;
            table.insertAdjacentHTML('beforeend', row);
        }
</script>

<script>
    function toggleTransactions (){
        const table = document.getElementById("transactionTable");
        const loadMoreButton = document.getElementById("loadMore-button");
        const goToTopButton = document.getElementById("goToTop-button");
        const visible = document.getElementById("show");
        const invisible = document.getElementById("doNotShow");
        

        table.classList.toggle("hidden");
        loadMoreButton.classList.toggle("hidden");
        goToTopButton.classList.toggle("hidden");
        visible.classList.toggle("hidden");
        invisible.classList.toggle("hidden");
    }
</script>
<script>
    function goToTop(){
        document.body.scrollTop = 0; 
        document.documentElement.scrollTop = 0;
    }
</script>

<script>
    $(document).ready(function () {
    
        toastr.options = {
            "positionClass" : "toast-bottom-center",
            "showDuration": "300", 
            "hideDuration": "1000",
            "timeOut": "5000", 
            "extendedTimeOut": "1000", 
            "hideEasing": "swing", 
            "showEasing": "swing", 
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut",
            "toastClass" : "custom-toast-class"
        };
        
        @if (!string.IsNullOrEmpty(ViewBag.Message))
        {
            <text>
            toastr.success('@ViewBag.Message');
            </text>
        }
    });
</script>
<script>
    $(document).ready(function () {
    toastr.options = {
        "positionClass" : "toast-bottom-center",
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "hideEasing": "swing",
        "showEasing": "swing",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut",
        "toastClass" : "custom-toast-notification"
    };
    @if (!string.IsNullOrEmpty(ViewBag.Notification))
    {
    <text>
    toastr.warning('@ViewBag.Notification');
    </text>
    }
    });
</script>
<style>
    .custom-toast-notification {
        background-color: #ff6347; /* Change to your desired background color */
        color: #ffffff; /* Change to your desired text color */
    }
</style>
}